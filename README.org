#+STARTUP: showall indent

* Fakeymacs

Windows の操作を Emacs のキーバインドで行うための設定です。

Keyhac for Windows ver 1.82 以上のバージョンでご利用ください。

- https://sites.google.com/site/craftware/keyhac-ja

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/25.html][Windows の操作を Emacs のキーバインドで行うための設定 （Keyhac版）]]

** Light バージョン

機能を制限した Light バージョン（config_light.py）も登録しました。Full バージョン（config.py）
との違いは以下のとおりとなります。

|--------------------------------------------------+--------------------+-----------------|
| 機能                                             | config.py          | config_light.py |
|--------------------------------------------------+--------------------+-----------------|
| Emacs標準キーバインド                            | ○                 | ○              |
| Emacs日本語入力モード [1]                        | ○                 | ○              |
| Emacsシフトモード [2]                            | ○（初期値：無効） | ×              |
| other_window                                     | ○                 | ×              |
| shell_command                                    | ○                 | ×              |
| ウィンドウの最小化、リストア                     | ○                 | ×              |
| アクティブウィンドウの切り替え                   | ○ [3]             | ○ [3]          |
| アクティブウィンドウのディスプレイ間移動         | ○                 | ×              |
| 仮想デスクトップの切り替え                       | ○                 | ×              |
| クリップボードリスト                             | ○                 | ×              |
| ランチャーリスト                                 | ○                 | ×              |
| Excel や Emacs と連携するためのオプション設定    | ○（初期値：無効） | ×              |
| キーボードを切替えて利用するためのオプション設定 | ○（初期値：無効） | ×              |
|--------------------------------------------------+--------------------+-----------------|

[1] IME が ON の時に文字（英数字か、スペースを除く特殊文字）を入力すると起動するモードです。
（モードに入ると、▲のマークが表示されます。） Emacs日本語入力モードになると Emacsキーバインド
として利用できるキーが限定され、その他のキーは Windows にそのまま渡されるようになるため、
IME のショートカットキーが利用できるようになります。

[2] 本設定のキーバインドと IME のショートカットキーが被って設定されている場合、日本語入力中に
そのキーを Shiftキーと一緒に押すことで IME のショートカットキーが利用できるようになるモードです。

[3] アクティブウィンドウの切り替えのキーの初期値は未設定（None）としています。このため、起動
するためのキーは、デフォルトキーの A-S-Tab、A-Tab となります。起動後は A-p、A-n で
アクティブウィンドウの切り替え、A-g で切り替え画面の終了（キャンセル）が利用できます。

** VSCode の強化ポイント

VSCode については、一般的な Emacs キーバインドの他に次のキーバインドを利用できるようにしています。

|-------------+--------------------------+--------------------------------|
| Key-binding | Fakeymacs Function       | VSCode Command                 |
|-------------+--------------------------+--------------------------------|
| Meta+x      | execute_extended_command | Show All Commands              |
| Ctl+x o     | other_window2            | Navigate Between Editor Groups |
| Ctl+x 0     | delete_window            | Close All Editors in Group     |
| Ctl+x 1     | delete_other_windows     | Close Editors in Other Groups  |
| Ctl+x 2     | split_window_below       | Split Editor Orthogonal        |
| Ctl+x 3     | split_window_right       | Split Editor                   |
| Meta+;      | comment_dwim             | Toggle Line Comment            |
| Ctrl+Alt+p  | unmark_next_like_this    | Cursor Undo                    |
| Ctrl+Alt+n  | mark_next_like_this      | Add Cursor Below               |
|-------------+--------------------------+--------------------------------|

VSCode に Center Editor Window Extension と vcode-dired Extension をインストールすることにより、
次のキーバインドも利用が可能となります。利用するための設定は _config_personal.py の中に記載して
います。

|-------------+--------------------+----------------------|
| Key-binding | Fakeymacs Function | VSCode Command       |
|-------------+--------------------+----------------------|
| Ctrl+l      | recenter           | Center Editor Window |
| Ctrl+x d    | dired              | Open dired buffer    |
|-------------+--------------------+----------------------|

*** ● use_vscode_wsl_key_conversion 変数

VSCode の Terminal内 で WSL 用のキー変換を行う（Terminal 内で Ctrl+k、Ctrl+r、Ctrl+s、Ctrl+y
の４つのキーを利用できるようにする）機能を利用できるようにするため、この変数を導入しています。
初期値を False（使わない）とし、仕様を理解した方のみ使う機能としています。

use_vscode_wsl_key_conversion 変数を True にしている場合には、次のキーを押下して Terminal に
移行するようにしてください。Terminal 内で Ctrl+k、Ctrl+r、Ctrl+s、Ctrl+y の４つのキーが利用
できるようになります。

※ Ctrl+s は、bash で stty stop undef の設定をすると使えます。この設定をしないでこのキーを押下
すると stop から戻れなくなりますのでご注意ください。

|------------------------------+--------------------+--------------------------------------|
| Key-binding                  | Fakeymacs Function | VSCode Command                       |
|------------------------------+--------------------+--------------------------------------|
| Ctrl+BackQuote（US）         | toggle_terminal    | Focus on Terminal View / Close Panel |
| Ctrl+[半角/全角]（JP）       | toggle_terminal    | Focus on Terminal View / Close Panel |
| Ctrl+Atmark（JP）            | toggle_terminal    | Focus on Terminal View / Close Panel |
|------------------------------+--------------------+--------------------------------------|
| Ctrl+Shift+BackQuote（US）   | new_terminal       | Create New Integrated Terminal       |
| Ctrl+Shift+[半角/全角]（JP） | new_terminal       | Create New Integrated Terminal       |
| Ctrl+Shift+Atmark（JP）      | new_terminal       | Create New Integrated Terminal       |
|------------------------------+--------------------+--------------------------------------|

Terminal から抜ける場合は次のキーを利用するようにしてください。先の４つのキーが VSCode の
ショートカットキーとして認識されるように戻ります。

|------------------------+--------------------+--------------------------------------|
| Key-binding            | Fakeymacs Function | VSCode Command                       |
|------------------------+--------------------+--------------------------------------|
| Ctrl+BackQuote（US）   | toggle_terminal    | Focus on Terminal View / Close Panel |
| Ctrl+[半角/全角]（JP） | toggle_terminal    | Focus on Terminal View / Close Panel |
| Ctrl+Atmark（JP）      | toggle_terminal    | Focus on Terminal View / Close Panel |
|------------------------+--------------------+--------------------------------------|
| Ctrl+[数字キー]        | switch_focus       | Focus n-th Editor Group              |
| Ctl+x o                | other_window2      | Navigate Between Editor Groups       |
|------------------------+--------------------+--------------------------------------|

マウスのクリックでカーソル位置の変更を行うと、この状態の認識に齟齬が発生することがあります。
その場合は、上記のいずれかのキーを押下することにより、Fakeymacs に現在の状態を再認識させる
ようにしてください。

※ use_vscode_wsl_key_conversion 変数が False（初期値）の場合には、 Ctrl+q を前置することで
４つのキーを利用することができます。

※ この機能をサポートするために use_ctrl_atmark_for_mark 変数を導入し、日本語キーボードで C-@
 をマーク用のキーとして使うかどうかを指定できるようにしました。初期値は False（使わない）です。
